Epic Games, DevOps Homework
Thank you for taking the time to complete the exercise below.  Please return your response within one week to aaron.zhi@epicgames.com.

Instructions/Notes:
State your assumptions when you solve each problem. 
All code is run through a test suite to test its production quality; these tests affect whether or not our interview process continues, so please take them seriously.
Please try to give an approximate time that it took you to solve each portion of the exercise.
Be aware that there may be multiple ways to solve some of the questions.
We’d also like to request that you keep the answers to these questions private.  If you post them to a web link, github account etc. please do your best to make them private.  

Questions:

1. Write a metric collector which collects the memory used per process across 5000 Linux hosts.
The collected information should be sent to a suitable metrics platform (Zabbix, Prometheus, Statsite or whatever you familiar or prefer).

2. Assume we have an online keyboard shopping service that is Node.js based and which just completed the coding process, please help to design the build, packaging and deployment pipeline:
- The service needs to be containerized (it would be great to provide the Dockerfile, and streamline it as much as possible)
- It’s expected to deploy to multiple environments(CI/Dev/Beta/UAT/Prod).  
- Service in the Prod needs to run on multiple hosts.


3. Now you’re responsible to provision the infrastructure for the above online keyboard shopping service, please help to design the infrastructure architecture:
-  Use any cloud platform - AWS, GCP, Azure, AliCloud, Tencent Cloud or any you prefer, for your infrastructure host.
- It could fit for a 100K CCU workload and more.


4. Please analyze the risks and areas worthy of optimization of the following API.

Request sample:
$ curl http://homework.epicgames.com/user/createUser?name=tom&password=123456


Response Headers:
{"status":200,"message":"successfully","body":{"id":1001,"name":"tom","password":"123456","age":null,"token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoidG9tIiwiZXhwIjo0MTAyNDE2MDAwfQ.TwidhnX3rVI1Zd1cxyD1WwwaZW6EjVYc5wFWGCdaZIk"}}


#### Answer

* 1
collector.go,摘自node_exporter源码

node_exporter:每个主机下载安装,指定端口和日志级别,设置开启自启
prometheus.yml配置中添加一个名为nodes任务，并添加多个服务器地址，重启Prometheus

* 2
见server目录,用的go示例项目

* 3
资源名称	资源类型	规格	费用报价
vpc	        vpc	    172.16.0.0/12	免费
负载均衡	clb	    slb.s2.medium	3876元/年
默认安全组	security.group	ecs6.com	免费
弹性带宽	eip	public	5355元/年
vswitch	    vswitch	172.16.0.0/24	免费
应用集群	2台云服务器ecs	ecs.g6.2xlarge	22644元/年
Redis	    kvstore	    Redis 16G集群版（8节点）(QPS:800000 Connections:80000)	15300元/年
polardb	    polardb	    polar.mysql.g4.xlarge

2台8核32G实例、200G存储、10M公网带宽、8核32G数据库、16G云缓存

* 4
1. request 首先应该用https安全性更高,method应该用post隐士传递参数,password最好使用加密传输
2. response 不应该叫"Response Headers",json结构一看就是响应体,200一般是用在状态码,这里一般用0或其他枚举类,区别于200-500状态码
安全考虑返回字段里不该有password